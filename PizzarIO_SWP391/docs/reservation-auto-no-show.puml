@startuml reservation-auto-no-show
title Luồng xử lý Reservation với Auto NO_SHOW Check

actor Cashier
participant "CashierController" as Controller
participant "ReservationService" as Service
participant "ReservationSchedulerService" as Scheduler
participant "TaskScheduler\n(Spring)" as TaskScheduler
database "Database" as DB
participant "ScheduledTask\n(Background)" as Task

== 1. TẠO RESERVATION (Cashier đặt bàn cho khách) ==

Cashier -> Controller: POST /api/reservations\n(tạo reservation)
activate Controller

Controller -> Service: createReservation(dto)
activate Service

Service -> DB: Validate table exists
Service -> DB: Check conflicts
Service -> DB: Save reservation
DB --> Service: reservation (id=123, startTime=18:00)

Service -> Scheduler: scheduleNoShowCheck(123, 18:00)
activate Scheduler
note right of Scheduler
  Tính thời gian chạy:
  executionTime = 18:00 + 15 phút = 18:15
end note

Scheduler -> TaskScheduler: schedule(\n  task: () -> handleNoShow(123),\n  time: 18:15\n)
activate TaskScheduler
TaskScheduler --> Scheduler: ScheduledFuture
note right of TaskScheduler
  TaskScheduler lưu task vào heap,
  sẽ tự động chạy khi đến 18:15
end note
deactivate TaskScheduler

Scheduler -> Scheduler: scheduledTasks.put(123, future)
note right of Scheduler
  Lưu ScheduledFuture vào Map
  để có thể cancel sau này
end note
Scheduler --> Service: void
deactivate Scheduler

Service --> Controller: ReservationDTO
deactivate Service

Controller --> Cashier: 201 Created
deactivate Controller

== 2. BACKGROUND: TaskScheduler tự động chạy khi đến 18:15 ==

note over TaskScheduler, Task
  ⏰ Đến 18:15 (startTime + 15 phút)
  TaskScheduler tự động trigger task
end note

TaskScheduler -> Task: Execute scheduled task
activate Task

Task -> Scheduler: handleNoShow(123)
activate Scheduler

Scheduler -> Service: processNoShowReservation(123)
activate Service

Service -> DB: findById(123)
DB --> Service: reservation (status=CONFIRMED)

alt Status vẫn là CONFIRMED (khách chưa đến)
    Service -> DB: Update reservation\nstatus = NO_SHOW
    
    Service -> DB: Check other active reservations\nfor this table
    
    alt Không còn reservation active
        Service -> DB: Update table\nstatus = AVAILABLE
        Service -> Service: broadcastTableStatus()
        note right of Service
          Thông báo cho Cashier và Guest
          qua WebSocket
        end note
    end
    
else Status đã ARRIVED hoặc CANCELED
    Service --> Service: Skip (khách đã đến/đã hủy)
end

Service --> Scheduler: void
deactivate Service

Scheduler -> Scheduler: scheduledTasks.remove(123)
note right of Scheduler
  Xóa task khỏi Map
  vì đã xử lý xong
end note

Scheduler --> Task: void
deactivate Scheduler

Task --> TaskScheduler: Task completed
deactivate Task

== 3. KHÁCH ĐẾN TRƯỚC 15 PHÚT (Cancel scheduled task) ==

Cashier -> Controller: POST /api/reservations/123/check-in\n(khách đã đến)
activate Controller

Controller -> Service: openTableForGuestWithReservation(123)
activate Service

Service -> Scheduler: cancelNoShowCheck(123)
activate Scheduler

Scheduler -> Scheduler: scheduledTasks.get(123)
Scheduler -> TaskScheduler: future.cancel(false)
activate TaskScheduler
note right of TaskScheduler
  Cancel task chưa chạy
  Task sẽ KHÔNG được execute
end note
TaskScheduler --> Scheduler: void
deactivate TaskScheduler

Scheduler -> Scheduler: scheduledTasks.remove(123)
Scheduler --> Service: void
deactivate Scheduler

Service -> DB: Update reservation status = ARRIVED
Service -> DB: Update table status = OCCUPIED

Service --> Controller: void
deactivate Service

Controller --> Cashier: 200 OK
deactivate Controller

== 4. HỦY RESERVATION (Cancel scheduled task) ==

Cashier -> Controller: DELETE /api/reservations/123
activate Controller

Controller -> Service: cancelReservation(123)
activate Service

Service -> Scheduler: cancelNoShowCheck(123)
activate Scheduler
Scheduler -> TaskScheduler: future.cancel(false)
activate TaskScheduler
TaskScheduler --> Scheduler: void
deactivate TaskScheduler
Scheduler --> Service: void
deactivate Scheduler

Service -> DB: Update reservation status = CANCELED
Service -> DB: Update table status = AVAILABLE

Service --> Controller: void
deactivate Service

Controller --> Cashier: 200 OK
deactivate Controller

== 5. CẬP NHẬT THỜI GIAN (Reschedule task) ==

Cashier -> Controller: PUT /api/reservations/123\n(đổi thời gian 18:00 → 19:00)
activate Controller

Controller -> Service: updateReservation(123, newDto)
activate Service

Service -> Scheduler: rescheduleNoShowCheck(123, 19:00)
activate Scheduler

Scheduler -> Scheduler: Cancel old task (18:15)
Scheduler -> TaskScheduler: Schedule new task (19:15)
activate TaskScheduler
TaskScheduler --> Scheduler: New ScheduledFuture
deactivate TaskScheduler

Scheduler -> Scheduler: scheduledTasks.put(123, newFuture)
Scheduler --> Service: void
deactivate Scheduler

Service -> DB: Update reservation
Service --> Controller: ReservationDTO
deactivate Service

Controller --> Cashier: 200 OK
deactivate Controller

@enduml


