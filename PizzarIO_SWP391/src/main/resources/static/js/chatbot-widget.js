class ChatbotWidget {
    constructor() {
        this.isOpen = false;
        this.messages = [];
        this.init();
    }

    init() {
        this.createWidget();
        this.attachEventListeners();
    }

    createWidget() {
        const widget = document.createElement('div');
        widget.innerHTML = `
            <div class="chatbot-widget">
                <button class="chatbot-toggle" id="chatbotToggle">
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="white">
                        <path d="M20 2H4c-1.1 0-2 .9-2 2v18l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm0 14H6l-2 2V4h16v12z"/>
                    </svg>
                </button>
                
                <div class="chatbot-window" id="chatbotWindow">
                    <div class="chatbot-header">
                        <div class="chatbot-title">
                            <span class="chatbot-icon">üçï</span>
                            <div>
                                <h3>PizzarIO Assistant</h3>
                                <p>Ch√∫ng t√¥i lu√¥n s·∫µn s√†ng gi√∫p b·∫°n!</p>
                            </div>
                        </div>
                        <button class="chatbot-close" id="chatbotClose">√ó</button>
                    </div>
                    
                    <div class="chatbot-messages" id="chatbotMessages">
                        <div class="message bot">
                            <div class="message-avatar">ü§ñ</div>
                            <div class="message-content">
                                Xin ch√†o! T√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa PizzarIO. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªÅ menu, ƒë·∫∑t b√†n, ho·∫∑c b·∫•t k·ª≥ th√¥ng tin n√†o v·ªÅ nh√† h√†ng. H√£y h·ªèi t√¥i nh√©! üòä
                            </div>
                        </div>
                    </div>
                    
                    <div class="chatbot-input">
                        <input type="text" id="chatbotInput" placeholder="Nh·∫≠p tin nh·∫Øn..." />
                        <button id="chatbotSend">
                            <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                                <path d="M2.01 21L23 12 2.01 3 2 10l15 2-15 2z"/>
                            </svg>
                        </button>
                    </div>
                </div>
            </div>
        `;
        document.body.appendChild(widget);
    }

    attachEventListeners() {
        const toggle = document.getElementById('chatbotToggle');
        const close = document.getElementById('chatbotClose');
        const send = document.getElementById('chatbotSend');
        const input = document.getElementById('chatbotInput');

        toggle.addEventListener('click', () => this.toggleWidget());
        close.addEventListener('click', () => this.toggleWidget());
        send.addEventListener('click', () => this.sendMessage());
        input.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') this.sendMessage();
        });
    }

    toggleWidget() {
        this.isOpen = !this.isOpen;
        const window = document.getElementById('chatbotWindow');
        const toggle = document.getElementById('chatbotToggle');
        
        if (this.isOpen) {
            window.classList.add('open');
            toggle.classList.add('open');
        } else {
            window.classList.remove('open');
            toggle.classList.remove('open');
        }
    }

    async sendMessage() {
        const input = document.getElementById('chatbotInput');
        const message = input.value.trim();
        
        if (!message) return;

        // Add user message
        this.addMessage(message, 'user');
        input.value = '';

        // Show typing indicator
        this.showTyping();

        try {
            // T·ª± ƒë·ªông l·∫•y context path t·ª´ URL hi·ªán t·∫°i
            const contextPath = window.location.pathname.split('/')[1];
            const apiUrl = contextPath ? `/${contextPath}/api/chatbot/chat` : '/api/chatbot/chat';
            
            console.log('üöÄ Sending request to:', apiUrl);
            console.log('üìù Message:', message);
            
            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ message: message })
            });

            console.log('üì• Response status:', response.status);
            
            const data = await response.json();
            console.log('üì¶ Response data:', data);
            
            this.hideTyping();

            if (data.success) {
                this.addMessage(data.response, 'bot');
            } else {
                this.addMessage('Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra: ' + (data.error || 'Unknown error'), 'bot');
                console.error('‚ùå Error from server:', data.error);
            }
        } catch (error) {
            console.error('‚ùå Fetch error:', error);
            this.hideTyping();
            this.addMessage('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Error: ' + error.message, 'bot');
        }
    }

    addMessage(text, sender) {
        const messagesContainer = document.getElementById('chatbotMessages');
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${sender}`;
        
        const avatar = sender === 'bot' ? 'ü§ñ' : 'üë§';
        
        messageDiv.innerHTML = `
            <div class="message-avatar">${avatar}</div>
            <div class="message-content">${this.escapeHtml(text)}</div>
        `;
        
        messagesContainer.appendChild(messageDiv);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    showTyping() {
        const messagesContainer = document.getElementById('chatbotMessages');
        const typing = document.createElement('div');
        typing.id = 'typingIndicator';
        typing.className = 'message bot typing';
        typing.innerHTML = `
            <div class="message-avatar">ü§ñ</div>
            <div class="message-content">
                <span class="dot"></span>
                <span class="dot"></span>
                <span class="dot"></span>
            </div>
        `;
        messagesContainer.appendChild(typing);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    hideTyping() {
        const typing = document.getElementById('typingIndicator');
        if (typing) typing.remove();
    }
}

// Initialize chatbot when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    new ChatbotWidget();
});

