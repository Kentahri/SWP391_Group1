package com.group1.swp.pizzario_swp391.service;

import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.event.EventListener;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.group1.swp.pizzario_swp391.dto.reservation.ReservationCreateDTO;
import com.group1.swp.pizzario_swp391.dto.reservation.ReservationDTO;
import com.group1.swp.pizzario_swp391.dto.reservation.ReservationUpdateDTO;
import com.group1.swp.pizzario_swp391.dto.websocket.TableStatusMessage;
import com.group1.swp.pizzario_swp391.entity.DiningTable;
import com.group1.swp.pizzario_swp391.entity.Reservation;
import com.group1.swp.pizzario_swp391.event.reservation.ReservationNoShowEvent;
import com.group1.swp.pizzario_swp391.mapper.ReservationMapper;
import com.group1.swp.pizzario_swp391.repository.ReservationRepository;
import com.group1.swp.pizzario_swp391.repository.TableRepository;

@Service
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
@RequiredArgsConstructor
@Slf4j
public class ReservationService {

    SimpMessagingTemplate messagingTemplate;
    ReservationRepository reservationRepository;
    TableRepository tableRepository;
    ReservationMapper reservationMapper;
    ReservationSchedulerService reservationSchedulerService;
    WebSocketService webSocketService;

    /**
     * T·∫°o reservation m·ªõi cho b√†n
     */
    @Transactional
    public ReservationDTO createReservation(ReservationCreateDTO dto) {
        DiningTable table = tableRepository.findById(dto.getTableId())
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y b√†n v·ªõi ID: " + dto.getTableId()));

        // T·∫°o reservation
        Reservation reservation = reservationMapper.toReservationEntity(dto);
        reservation.setDiningTable(table);
        Reservation saved = reservationRepository.save(reservation);

        DiningTable.TableStatus oldStatus = table.getTableStatus();
        if(dto.getStartTime().isBefore(LocalDateTime.now().plusMinutes(90))) {
            table.setTableStatus(DiningTable.TableStatus.RESERVED);
            tableRepository.save(table);
            
            // Broadcast WebSocket
            webSocketService.broadcastTableStatusToGuests(table.getId(), table.getTableStatus());
            webSocketService.broadcastTableStatusToCashier(
                TableStatusMessage.MessageType.TABLE_RESERVED,
                table.getId(),
                oldStatus,
                table.getTableStatus(),
                "CASHIER",
                String.format("B√†n ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t tr∆∞·ªõc - Reservation #%d (%s - %s)", 
                             saved.getId(), saved.getName(), saved.getPhone())
            );
        } else {
            tableRepository.save(table);
            webSocketService.broadcastTableStatusToGuests(table.getId(), table.getTableStatus());
        }

        reservationSchedulerService.scheduleNoShowCheck(reservation.getId(), reservation.getStartTime());
        return reservationMapper.toReservationDTO(saved);
    }

    /**
     * Throw exception n·∫øu c√≥ l·ªói business logic
     */
    public void validateReservationBusinessLogic(ReservationCreateDTO dto) {
        DiningTable table = tableRepository.findById(dto.getTableId())
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y b√†n v·ªõi ID: " + dto.getTableId()));

        if (dto.getCapacityExpected() > table.getCapacity()) {
            throw new RuntimeException("V∆∞·ª£t qu√° s·ªë ng∆∞·ªùi t·ªëi ƒëa t·∫°i b√†n, vui l√≤ng ch·ªçn b√†n ph√π h·ª£p");
        }

        Reservation duplicateReservation = reservationRepository.findDuplicateReservation(dto.getTableId(), dto.getStartTime());
        if (duplicateReservation != null) {
            throw new RuntimeException("B√†n ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t trong th·ªùi gian n√†y");
        }

        boolean checkConflictReservation = checkConflictReservation(dto.getTableId(), dto.getStartTime());
        if (checkConflictReservation) {
            throw new RuntimeException("Th·ªùi gian ƒë·∫∑t tr∆∞·ªõc ph·∫£i c√°ch nhau √≠t nh·∫•t 90 ph√∫t.");
        }

        if ((table.getTableStatus().equals(DiningTable.TableStatus.OCCUPIED) || table.getTableStatus().equals(DiningTable.TableStatus.WAITING_PAYMENT))
                && dto.getStartTime().isBefore(LocalDateTime.now().plusMinutes(90))) {
            throw new RuntimeException("B√†n hi·ªán ƒëang c√≥ ng∆∞·ªùi ng·ªìi, h√£y ƒë·∫∑t b√†n c√°ch th·ªùi ƒëi·ªÉm n√†y √≠t nh·∫•t 90 ph√∫t");
        }
    }

    /**
     * Ki·ªÉm tra quanh 1 kho·∫£ng th·ªùi gian nh·∫•t ƒë·ªãnh (¬± 90 ph√∫t)
     */
    public boolean checkConflictReservation(int tableId, LocalDateTime startTime) {
        List<Reservation> conflictReservations = reservationRepository.findConflictReservation(
            tableId, 
            startTime.minusMinutes(90), 
            startTime.plusMinutes(90)
        );
        return !conflictReservations.isEmpty();
    }

    /**
     * C·∫≠p nh·∫≠t th√¥ng tin reservation
     */
    @Transactional
    public ReservationDTO updateReservation(Long reservationId, ReservationUpdateDTO dto) {
        Reservation reservation = reservationRepository.findById(reservationId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y reservation"));

        // Ki·ªÉm tra reservation ƒë√£ b·ªã h·ªßy ch∆∞a
        if (reservation.getStatus() == Reservation.Status.CANCELED) {
            throw new RuntimeException("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t reservation ƒë√£ b·ªã h·ªßy");
        }

        DiningTable table = reservation.getDiningTable();

        // Validate capacity
        if (dto.getCapacityExpected() > table.getCapacity()) {
            throw new RuntimeException("V∆∞·ª£t qu√° s·ªë ng∆∞·ªùi t·ªëi ƒëa t·∫°i b√†n, vui l√≤ng ch·ªçn b√†n ph√π h·ª£p");
        }

        // N·∫øu thay ƒë·ªïi th·ªùi gian, ki·ªÉm tra conflict
        if (!dto.getStartTime().equals(reservation.getStartTime())) {
            // Check duplicate
            Reservation duplicateReservation = reservationRepository.findDuplicateReservation(table.getId(), dto.getStartTime());
            if (duplicateReservation != null && !duplicateReservation.getId().equals(reservationId)) {
                throw new RuntimeException("B√†n ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t trong th·ªùi gian n√†y");
            }

            boolean conflictReservations = checkConflictReservation(table.getId(), dto.getStartTime());
            if (conflictReservations) {
                throw new RuntimeException("Th·ªùi gian ƒë·∫∑t tr∆∞·ªõc ph·∫£i c√°ch nhau √≠t nh·∫•t 90 ph√∫t.");
            }

            // Check n·∫øu b√†n ƒëang occupied
            if ((table.getTableStatus().equals(DiningTable.TableStatus.OCCUPIED) ||
                    table.getTableStatus().equals(DiningTable.TableStatus.WAITING_PAYMENT))
                    && dto.getStartTime().isBefore(LocalDateTime.now().plusMinutes(90))) {
                throw new RuntimeException("B√†n hi·ªán ƒëang c√≥ ng∆∞·ªùi ng·ªìi, h√£y ƒë·∫∑t b√†n c√°ch th·ªùi ƒëi·ªÉm n√†y √≠t nh·∫•t 90 ph√∫t");
            }
        }

        // C·∫≠p nh·∫≠t th√¥ng tin
        reservation.setName(dto.getCustomerName());
        reservation.setPhone(dto.getCustomerPhone());
        reservation.setCapacityExpected(dto.getCapacityExpected());
        reservation.setStartTime(dto.getStartTime());
        reservation.setNote(dto.getNote());

        reservationSchedulerService.updateNoShowCheck(reservationId, reservation.getStartTime());
        Reservation updated = reservationRepository.save(reservation);
        return reservationMapper.toReservationDTO(updated);
    }

    /**
     * H·ªßy reservation
     */
    @Transactional
    public void cancelReservation(Long reservationId) {
        Reservation reservation = reservationRepository.findById(reservationId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y reservation"));

        reservation.setStatus(Reservation.Status.CANCELED);
        DiningTable table = reservation.getDiningTable();
        DiningTable.TableStatus oldStatus = table.getTableStatus();

        if (table.getTableStatus() == DiningTable.TableStatus.RESERVED) {
            table.setTableStatus(DiningTable.TableStatus.AVAILABLE);
            tableRepository.save(table);
            
            // Broadcast WebSocket
            webSocketService.broadcastTableStatusToGuests(table.getId(), table.getTableStatus());
            webSocketService.broadcastTableStatusToCashier(
                TableStatusMessage.MessageType.TABLE_RELEASED,
                table.getId(),
                oldStatus,
                table.getTableStatus(),
                "CASHIER",
                String.format("ƒê√£ h·ªßy ƒë·∫∑t b√†n #%d (%s - %s)", 
                             reservationId, reservation.getName(), reservation.getPhone())
            );
        }

        reservationSchedulerService.cancelNoShowCheck(reservationId);
        reservationRepository.save(reservation);
        tableRepository.save(table);
        
        log.info("ƒê√£ h·ªßy reservation {} cho b√†n {}", reservationId, table.getId());
    }

    /**
     * Kh√≥a b√†n t·ª± ƒë·ªông n·∫øu ƒë√£ ƒë·∫øn th·ªùi gian quy ƒë·ªãnh
     */
    @Scheduled(fixedRate = 5000)
    @Transactional
    public synchronized void closeTable() {
        log.info("üîÑ Scheduled: closeTable() is running...");
        List<Reservation> reservationList = reservationRepository.findAllUpcomingReservationInRange(LocalDateTime.now(),
                LocalDateTime.now().plusMinutes(90));
        if(!reservationList.isEmpty()){
            for (Reservation reservation : reservationList) {
                DiningTable table = reservation.getDiningTable();
                DiningTable.TableStatus oldStatus = table.getTableStatus();
                if (oldStatus.equals(DiningTable.TableStatus.AVAILABLE)) {
                    table.setTableStatus(DiningTable.TableStatus.RESERVED);
                    webSocketService.broadcastTableStatusToGuests(table.getId(), table.getTableStatus());
                    webSocketService.broadcastTableStatusToCashier(TableStatusMessage.MessageType.TABLE_RESERVED, table.getId(), oldStatus, table.getTableStatus(), "System", "B√†n t·ª± ƒë·ªông kh√≥a cho reservation #" + reservation.getId());
                    tableRepository.save(table);
                    reservationRepository.save(reservation);
                }
            }
        }
    }


    /**
     * M·ªü b√†n cho kh√°ch ƒë√£ ƒë·∫∑t tr∆∞·ªõc
     */
    @Transactional
    public void openTableForGuestWithReservation(Long reservationId) {
        Reservation reservation = reservationRepository.findById(reservationId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y reservation!"));

        reservationSchedulerService.cancelNoShowCheck(reservationId);
        reservation.setStatus(Reservation.Status.ARRIVED);
        
        DiningTable table = reservation.getDiningTable();
        DiningTable.TableStatus oldStatus = table.getTableStatus();
        if(oldStatus.equals(DiningTable.TableStatus.OCCUPIED) || oldStatus.equals(DiningTable.TableStatus.WAITING_PAYMENT)){
            throw new RuntimeException("B√†n ƒëang c√≥ kh√°ch, kh√¥ng th·ªÉ m·ªü!");
        }
        table.setTableStatus(DiningTable.TableStatus.AVAILABLE);

        tableRepository.save(table);
        reservationRepository.save(reservation);
        
        // Broadcast WebSocket
        webSocketService.broadcastTableStatusToGuests(table.getId(), table.getTableStatus());
        webSocketService.broadcastTableStatusToCashier(
            TableStatusMessage.MessageType.TABLE_RELEASED,
            table.getId(),
            oldStatus,
            table.getTableStatus(),
            "CASHIER",
            String.format("M·ªü b√†n #%d", table.getId())
        );
        
        log.info("ƒê√£ m·ªü b√†n {} cho reservation {} (kh√°ch ƒë√£ ƒë·∫øn)", table.getId(), reservationId);
    }

    /**
     * Event Listener - L·∫Øng nghe event NO_SHOW t·ª´ scheduler
     */
    @EventListener
    @Transactional
    public synchronized void onReservationNoShowEvent(ReservationNoShowEvent event) {
        log.info("Received NO_SHOW event for reservation {}", event.getReservationId());
        processNoShowReservation(event.getReservationId());
    }

    /**
     * X·ª≠ l√Ω NO_SHOW cho reservation c·ª• th·ªÉ (ƒë∆∞·ª£c g·ªçi b·ªüi Event Listener)
     */
    public void processNoShowReservation(Long reservationId) {
        Reservation reservation = reservationRepository.findByIdWithLock(reservationId);

        if (reservation == null) {
            log.warn("Kh√¥ng t√¨m th·∫•y reservation {}", reservationId);
            return;
        }

        // Ch·ªâ x·ª≠ l√Ω n·∫øu status v·∫´n l√† CONFIRMED (ch∆∞a ARRIVED, ch∆∞a CANCELED)
        if (reservation.getStatus() != Reservation.Status.CONFIRMED) {
            log.info("Reservation {} ƒë√£ thay ƒë·ªïi status ({}), kh√¥ng x·ª≠ l√Ω NO_SHOW", 
                     reservationId, reservation.getStatus());
            return;
        }

        // ƒê√°nh d·∫•u NO_SHOW
        reservation.setStatus(Reservation.Status.NO_SHOW);
        reservationRepository.save(reservation);
        
        log.info("ƒê√£ ƒë√°nh d·∫•u NO_SHOW cho reservation {}", reservationId);

        // X·ª≠ l√Ω b√†n
        DiningTable table = reservation.getDiningTable();
        DiningTable.TableStatus oldStatus = table.getTableStatus();

        // Ki·ªÉm tra xem trong 90p t·ªõi c√≤n reservation CONFIRMED n√†o kh√°c kh√¥ng
        List<Reservation> otherActiveReservations = reservationRepository.findConflictReservation(table.getId(), LocalDateTime.now(), LocalDateTime.now().plusMinutes(90));

        // N·∫øu kh√¥ng c√≤n reservation n√†o v√† b√†n v·∫´n RESERVED, m·ªü l·∫°i
        if (otherActiveReservations.isEmpty() 
            && oldStatus == DiningTable.TableStatus.RESERVED) {
            
            table.setTableStatus(DiningTable.TableStatus.AVAILABLE);
            tableRepository.save(table);
            
            log.info("ƒê√£ m·ªü l·∫°i b√†n {} (kh√¥ng c√≤n reservation active)", table.getId());

            // Broadcast
            webSocketService.broadcastTableStatusToGuests(table.getId(), table.getTableStatus());
            webSocketService.broadcastTableStatusToCashier(
                TableStatusMessage.MessageType.TABLE_RELEASED,
                table.getId(),
                oldStatus,
                table.getTableStatus(),
                "SYSTEM",
                "Kh√°ch kh√¥ng ƒë·∫øn sau 15 ph√∫t, b√†n ƒë∆∞·ª£c m·ªü l·∫°i (Reservation #" + reservationId + ")"
            );
        }else {
            webSocketService.broadcastTableStatusToGuests(table.getId(),table.getTableStatus());
            webSocketService.broadcastTableStatusToCashier(
                    TableStatusMessage.MessageType.TABLE_RESERVED,
                    table.getId(),
                    oldStatus,
                    oldStatus,
                    "SYSTEM",
                    "C√≥ b√†n ƒë·∫∑t tr∆∞·ªõc trong 90p n·ªØa, b√†n ƒë√£ ƒë∆∞·ª£c kh√≥a l·∫°i (Reservation #" + reservationId + ")"
            );
        }
    }

    /**
     * L·∫•y t·∫•t c·∫£ danh s√°ch reservation
     */
    public List<ReservationDTO> getUpcomingReservations() {
        List<Reservation> reservationList = reservationRepository.findUpcomingReservations();
        return reservationList.stream().map(reservationMapper::toReservationDTO).collect(Collectors.toList());
    }

    /**
     * L·∫•y reservation c·ªßa m·ªôt b√†n c·ª• th·ªÉ
     */
    public List<ReservationDTO> getReservationsByTableId(Integer tableId) {
        List<Reservation> reservationList = reservationRepository.findAllReservationsByTableId(tableId);
        return reservationList.stream().map(reservationMapper::toReservationDTO).collect(Collectors.toList());
    }

    /**
     * T√¨m ki·∫øm reservation s·∫Øp t·ªõi theo keyword
     */
    public List<ReservationDTO> searchUpcomingReservations(String keyword) {
        if (keyword == null || keyword.trim().isEmpty()) {
            return getUpcomingReservations();
        }
        List<Reservation> reservationList = reservationRepository.searchUpcomingReservations(LocalDateTime.now(), keyword.trim());
        return reservationList.stream().map(reservationMapper::toReservationDTO).collect(Collectors.toList());
    }

    /**
     * L·∫•y th√¥ng tin reservation theo ID ƒë·ªÉ edit
     */
    public ReservationDTO findById(Long reservationId) {
        Reservation reservation = reservationRepository.findById(reservationId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y reservation"));
        return reservationMapper.toReservationDTO(reservation);
    }

}

