package com.group1.swp.pizzario_swp391.service;

import com.group1.swp.pizzario_swp391.entity.StaffShift;
import com.group1.swp.pizzario_swp391.repository.StaffShiftRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;

@Service
@RequiredArgsConstructor
@Slf4j
public class StaffScheduleService {

    private final StaffShiftRepository staffShiftRepository;

    /**
     * Ch·∫°y m·ªói 30 ph√∫t ƒë·ªÉ ki·ªÉm tra c√°c ca ƒë√£ qu√° h·∫°n check-in
     * N·∫øu qu√° 2 gi·ªù sau gi·ªù b·∫Øt ƒë·∫ßu ca m√† ch∆∞a check-in ‚Üí ƒë√°nh d·∫•u ABSENT
     */
    @Scheduled(fixedRate = 5000) // 10p  30 ph√∫t = 1800000ms
    @Transactional
    public void markAbsentShifts() {
        log.info("üîÑ Scheduled: markAbsentShifts() is running...");
        LocalDate today = LocalDate.now();
        LocalDateTime now = LocalDateTime.now();

        // L·∫•y t·∫•t c·∫£ ca l√†m h√¥m nay
        List<StaffShift> todayShifts = staffShiftRepository
                .findByWorkDateBetween(today, today);

        int absentCount = 0;
        for (StaffShift ss : todayShifts) {
            // N·∫øu ca ƒëang SCHEDULED v√† ch∆∞a check-in
            if (ss.getStatus() == StaffShift.Status.SCHEDULED && ss.getCheckIn() == null) {
                LocalDateTime shiftStart = ss.getWorkDate().atTime(ss.getShift().getStartTime().toLocalTime());
                LocalDateTime deadline = shiftStart.plusMinutes(3); // Qu√° 2 gi·ªù sau ca b·∫Øt ƒë·∫ßu

                // N·∫øu ƒë√£ qu√° deadline ‚Üí ƒë√°nh d·∫•u ABSENT
                if (now.isAfter(deadline)) {
                    ss.setStatus(StaffShift.Status.ABSENT);
                    ss.setPenaltyPercent(100); // Ph·∫°t 100% l∆∞∆°ng ca n√†y
                    String noteDetail = String.format("ABSENT - Kh√¥ng check-in (Deadline: %s)\n",
                            deadline.toLocalTime());
                    ss.setNote((ss.getNote() != null ? ss.getNote() : "") + noteDetail);
                    staffShiftRepository.save(ss);
                    absentCount++;

                    log.warn("Marked ABSENT for staff {} - shift {} on {}",
                            ss.getStaff().getName(),
                            ss.getShift().getShiftName(),
                            ss.getWorkDate());
                }
            }
        }

        if (absentCount > 0) {
            log.info("Marked {} shifts as ABSENT", absentCount);
        }
    }

    /**
     * T·ª± ƒë·ªông k·∫øt th√∫c ca l√†m vi·ªác n·∫øu nh√¢n vi√™n qu√™n logout
     * Ch·∫°y v√†o 00:30 m·ªói ng√†y
     */
    @Scheduled(cron = "0 30 0 * * *") // 00:30 AM h√†ng ng√†y
    @Transactional
    public void autoCompleteShifts() {
        LocalDate yesterday = LocalDate.now().minusDays(1);
        LocalDateTime now = LocalDateTime.now();

        List<StaffShift> yesterdayShifts = staffShiftRepository
                .findByWorkDateBetween(yesterday, yesterday);

        int autoCompleted = 0;
        for (StaffShift ss : yesterdayShifts) {
            // N·∫øu ƒë√£ check-in nh∆∞ng ch∆∞a check-out
            if (ss.getCheckIn() != null && ss.getCheckOut() == null) {
                // T·ª± ƒë·ªông set check-out = end time c·ªßa ca
                ss.setCheckOut(ss.getShift().getEndTime());
                ss.setStatus(StaffShift.Status.COMPLETED);
                String noteDetail = "AUTO-COMPLETED - Qu√™n checkout\n";
                ss.setNote((ss.getNote() != null ? ss.getNote() : "") + noteDetail);
                staffShiftRepository.save(ss);
                autoCompleted++;

                log.warn("Auto-completed shift for staff {} - forgot to logout",
                        ss.getStaff().getName());
            }
        }

        if (autoCompleted > 0) {
            log.info("Auto-completed {} shifts", autoCompleted);
        }
    }

}
