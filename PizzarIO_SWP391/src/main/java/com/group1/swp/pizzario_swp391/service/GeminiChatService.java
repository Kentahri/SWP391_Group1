package com.group1.swp.pizzario_swp391.service;

import java.text.Normalizer;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;

import com.google.genai.Client;
import com.google.genai.types.GenerateContentConfig;
import com.group1.swp.pizzario_swp391.entity.Product;
import com.group1.swp.pizzario_swp391.repository.OrderRepository;
import com.group1.swp.pizzario_swp391.repository.ProductRepository;
import com.group1.swp.pizzario_swp391.utils.FuzzyIntentDetector;
import com.group1.swp.pizzario_swp391.utils.RegexIntentDetector;

@Service
@RequiredArgsConstructor
@Slf4j
public class GeminiChatService {


    private final Client geminiClient;
    private final FuzzyIntentDetector fuzzyIntentDetector;
    private final RegexIntentDetector regexIntentDetector;
    private final ProductRepository productRepository;
    private final OrderRepository orderRepository;

    @Value("${gemini.api.model}")
    private String model;

    public enum Intent {CHEAPEST, HIGHEST, PROMOTION, COMBO, BEST_SELLER, PIZZA, OTHER}


    public interface SynonymProvider {
        Map<Intent, List<String>> getSynonyms();
    }

    private static final class SynonymProviderImpl implements SynonymProvider {
        @Override
        public Map<Intent, List<String>> getSynonyms() {
            return Map.of(
                    Intent.CHEAPEST, List.of("re nhat", "gia thap nhat", "re hon", "muc gia thap", "re nhat la"),
                    Intent.HIGHEST, List.of("dat nhat", "gia cao nhat", "dat hon", "dat nhat la"),
                    Intent.PROMOTION, List.of("khuyen mai", "uu dai", "giam gia", "deal", "voucher"),
                    Intent.BEST_SELLER, List.of("ban chay", "pho bien", "hot nhat", "nhieu nguoi mua", "yeu thich", "ngon nhat"),
                    Intent.COMBO, List.of("combo"),
                    Intent.PIZZA, List.of("pizza")

            );
        }
    }


    private static final String SYSTEM_PROMPT = """
            B·∫°n l√† chatbot t∆∞ v·∫•n m√≥n ƒÉn c·ªßa nh√† h√†ng PizzarIO üçï‚ú®
            Nhi·ªám v·ª• c·ªßa b·∫°n l√† gi√∫p kh√°ch ch·ªçn m√≥n m·ªôt c√°ch d·ªÖ d√†ng, nhanh ch√≥ng v√† vui v·∫ª.
            
            Phong c√°ch tr·∫£ l·ªùi:
            - D·ªÖ th∆∞∆°ng, nhi·ªát t√¨nh, th√¢n thi·ªán üòÑ
            - C√¢u tr·∫£ l·ªùi ng·∫Øn g·ªçn, r√µ r√†ng, d·ªÖ ƒë·ªçc (kh√¥ng d√πng c√¢u d√†i).
            - Khuy·∫øn kh√≠ch, g·ª£i √Ω, kh√¥ng √©p bu·ªôc.
            - D√πng emoji h·ª£p l√Ω (1‚Äì3 emoji m·ªói c√¢u, ƒë·ª´ng l·∫°m d·ª•ng).
            - N·∫øu ng∆∞·ªùi d√πng h·ªèi chung chung ‚Üí h·ªèi l·∫°i ƒë·ªÉ l√†m r√µ nhu c·∫ßu (v√≠ d·ª•: ƒÉn m·∫•y ng∆∞·ªùi? th√≠ch v·ªã g√¨?).
            - Kh√¥ng d√πng c√°c c√°i k√Ω hi·ªáu trong markdown nh∆∞ *, -, >, #, v.v.
            
            Khi t∆∞ v·∫•n m√≥n:
            - N·∫øu kh√°ch h·ªèi m√≥n r·∫ª nh·∫•t ‚Üí g·ª£i √Ω c√°c m√≥n gi√° th·∫•p d·ªÖ ch·ªçn.
            - N·∫øu kh√°ch h·ªèi m√≥n ƒë·∫Øt / cao c·∫•p ‚Üí g·ª£i √Ω m√≥n .
            - N·∫øu kh√°ch h·ªèi khuy·∫øn m√£i ‚Üí ∆∞u ti√™n m√≥n ƒëang flash sale ho·∫∑c voucher.
            - N·∫øu kh√°ch h·ªèi combo ‚Üí g·ª£i √Ω combo k√®m n∆∞·ªõc/khai v·ªã cho ti·ªán.
            - N·∫øu kh√°ch h·ªèi b√°n ch·∫°y ‚Üí gi·ªõi thi·ªáu c√°c m√≥n b√°n ƒë∆∞·ª£c nhi·ªÅu.
            --> T·∫•t c·∫£ s·∫Ω d·ª±a tr√™n d·ªØ li·ªáu v·ªÅ m√≥n s·∫Ω ƒë∆∞·ª£c ƒë√≠nh k√®m ·ªü b√™n d∆∞·ªõi, ch·ª© kh√¥ng t·ª± b·ªãa ra.
            
            Kh√¥ng l√†m:
            - Kh√¥ng tr·∫£ l·ªùi nh∆∞ robot.
            - Kh√¥ng n√≥i lan man d√†i d√≤ng.
            - Kh√¥ng nh·∫Øc ƒë·∫øn m√¥ h√¨nh AI hay c√°ch b·∫°n ƒë∆∞·ª£c t·∫°o ra.
            
            Cu·ªëi m·ªói c√¢u tr·∫£ l·ªùi:
            - G·ª£i √Ω h√†nh ƒë·ªông ti·∫øp theo cho kh√°ch (v√≠ d·ª•: h·ªèi th√™m v·ªÅ s·ªë ng∆∞·ªùi ƒÉn, g·ª£i √Ω m√≥n kh√°c, h·ªèi v·ªÅ s·ªü th√≠ch v·ªã ƒÉn, v.v.).
            
            V√≠ d·ª• c√¢u tr·∫£ l·ªùi chu·∫©n:
            ‚ÄúB·∫°n mu·ªën t√¨m m√≥n gi√° d·ªÖ th∆∞∆°ng ƒë√∫ng kh√¥ng n√®? üòÑ \s
            M√¨nh ƒë·ªÅ xu·∫•t th·ª≠ Pizza H·∫£i S·∫£n Mini v√† Pizza B√≤ Ph√¥ Mai size S, v·ª´a ngon v·ª´a ti·∫øt ki·ªám üíõ \s
            B·∫°n ƒÉn m·∫•y ng∆∞·ªùi ƒë·ªÉ m√¨nh g·ª£i √Ω chu·∫©n h∆°n nha? üòã‚Äù
            
            D∆∞·ªõi ƒë√¢y l√† d·ªØ li·ªáu m√≥n ƒÉn ƒë∆∞·ª£c cung c·∫•p d·ª±a tr√™n c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng:
            """;

    private String normalize(String input) {
        if (input == null || input.isBlank()) return "";
        String normalized = Normalizer.normalize(input.toLowerCase(), Normalizer.Form.NFD)
                .replaceAll("\\p{M}", "");
        if (normalized.contains("ƒë")) {
            normalized = normalized.replace("ƒë", "d");
        }
        return normalized.replaceAll("[^a-z0-9\\s%]", " ").replaceAll("\\s+", " ").trim();
    }

    private Intent detect(String input) {
        log.debug("Intent for input: {}", input);
        SynonymProviderImpl provider = new SynonymProviderImpl();
        regexIntentDetector.init(provider);
        String raw = normalize(input);
//        log.debug("üìù Normalized input: {}", raw);

        Intent regexIntent = regexIntentDetector.analyzerUserIntent(raw);
        log.debug("üéØ Regex intent: {}", regexIntent);

        if (regexIntent != Intent.OTHER) {
            log.info("‚úÖ Intent detected by regex: {}", regexIntent);
            return regexIntent;
        }

        fuzzyIntentDetector.init(provider);
        Intent fuzzyIntent = fuzzyIntentDetector.detect(raw);
        log.info("‚úÖ Intent detected by fuzzy: {}", fuzzyIntent);
        return fuzzyIntent;
    }


    public String chat(String userMessage) {
        try {
            Intent intent = detect(userMessage);
            log.info("‚úÖ Detected intent: {}", intent);

            String requirement;
            switch (intent) {
                case CHEAPEST -> {
                    requirement = handleCheapestIntent();
                }
                case HIGHEST -> {
                    requirement = handleHighestIntent();
                }
                case PROMOTION -> {
                    requirement = handlePromotionIntent();
                }
                case COMBO -> {
                    requirement = handleComboIntent();
                }
                case BEST_SELLER -> {
                    requirement = handleBestSellerIntent();
                }
                case PIZZA -> {
                    requirement = handlePizzaIntent();
                }
                default -> {
                    requirement = "B·∫°n c√≥ th·ªÉ cung c·∫•p th√™m th√¥ng tin ƒë·ªÉ m√¨nh gi√∫p b·∫°n ch·ªçn m√≥n ph√π h·ª£p h∆°n kh√¥ng? üòä";
                }
            }

            requirement = requirement + "\n\nKh√°ch h√†ng h·ªèi: " + userMessage;
            String fullPrompt = SYSTEM_PROMPT + "\n" + requirement;
            log.info("ü§ñ Calling Gemini API with model: {}", model);

            GenerateContentConfig config = GenerateContentConfig.builder()
                    .temperature(0.7f)
                    .topK(50f)
                    .topP(0.85f)
                    .maxOutputTokens(1024)
                    .build();

            return geminiClient.models.generateContent(model, fullPrompt, config).text();
        } catch (Exception e) {
            log.error("‚ùå Error in chat method: ", e);
            return "Xin l·ªói, t√¥i ƒëang g·∫∑p l·ªói. Vui l√≤ng th·ª≠ l·∫°i sau! üòî";
        }
    }

    private String handlePizzaIntent() {
        try {
            List<Product> pizzaProducts = getPizzaProducts();
            if (pizzaProducts.isEmpty()) {
                return "Hi·ªán t·∫°i kh√¥ng c√≥ s·∫£n ph·∫©m pizza trong menu. Vui l√≤ng xem c√°c s·∫£n ph·∫©m kh√°c nh√©! üçï";
            }

            return buildProductResponse(pizzaProducts, "others");
        } catch (Exception e) {
            return "Kh√¥ng th·ªÉ t√¨m s·∫£n ph·∫©m pizza. Vui l√≤ng th·ª≠ l·∫°i sau!";
        }
    }

    private String handleCheapestIntent() {
        try {
            log.info("üîç Fetching cheapest products...");
            List<Product> cheapestProducts = getCheapestProducts();
            if (cheapestProducts.isEmpty()) {
                return "Hi·ªán t·∫°i kh√¥ng c√≥ s·∫£n ph·∫©m gi√° th·∫•p trong menu. Vui l√≤ng xem c√°c s·∫£n ph·∫©m kh√°c nh√©! üíé";
            }
            String response = buildProductResponse(cheapestProducts, "gi√° r·∫ª nh·∫•t");
            log.info("üìù Built response for cheapest products");
            return response;
        } catch (Exception e) {
            log.error("‚ùå Error handling cheapest intent: ", e);
            return "Kh√¥ng th·ªÉ t√¨m s·∫£n ph·∫©m gi√° r·∫ª nh·∫•t. Vui l√≤ng th·ª≠ l·∫°i sau!";
        }
    }

    private String handleHighestIntent() {
        try {
            List<Product> highestProducts = getHighestPriceProducts();
            if (highestProducts.isEmpty()) {
                return "Hi·ªán t·∫°i kh√¥ng c√≥ s·∫£n ph·∫©m cao c·∫•p trong menu. Vui l√≤ng xem c√°c s·∫£n ph·∫©m kh√°c nh√©! üíé";
            }
            String response = buildProductResponse(highestProducts, "gi√° cao nh·∫•t");
            log.info("Highest products found: {}", highestProducts.size());
            return response;

        } catch (Exception e) {
            log.error("Error handling highest intent: ", e);
            return "Kh√¥ng th·ªÉ t√¨m s·∫£n ph·∫©m gi√° cao nh·∫•t. Vui l√≤ng th·ª≠ l·∫°i sau!";
        }
    }

    private String handlePromotionIntent() {
        try {
            List<Product> promotionProducts = getPromotionProducts();
            if (promotionProducts.isEmpty()) {
                return "Hi·ªán t·∫°i kh√¥ng c√≥ s·∫£n ph·∫©m ƒëang khuy·∫øn m√£i. Vui l√≤ng quay l·∫°i sau ƒë·ªÉ kh√¥ng b·ªè l·ª° ∆∞u ƒë√£i! üéâ";
            }

            String response = buildProductResponse(promotionProducts, "khuy·∫øn m√£i");
            log.info("Promotion products found: {}", promotionProducts.size());
            return response;

        } catch (Exception e) {
            log.error("Error handling promotion intent: ", e);
            return "Kh√¥ng th·ªÉ t√¨m s·∫£n ph·∫©m khuy·∫øn m√£i. Vui l√≤ng th·ª≠ l·∫°i sau!";
        }
    }

    private String handleComboIntent() {
        try {
            List<Product> comboProducts = getComboProducts();
            if (comboProducts.isEmpty()) {
                return "Hi·ªán t·∫°i kh√¥ng c√≥ combo n√†o trong menu. Vui l√≤ng xem c√°c s·∫£n ph·∫©m kh√°c nh√©! üçï";
            }

            String response = buildProductResponse(comboProducts, "combo");
            log.info("Combo products found: {}", comboProducts.size());
            return response;

        } catch (Exception e) {
            log.error("Error handling combo intent: ", e);
            return "Kh√¥ng th·ªÉ t√¨m combo. Vui l√≤ng th·ª≠ l·∫°i sau!";
        }
    }

    private String handleBestSellerIntent() {
        try {
            List<Product> bestSellerProducts = getBestSellerProducts();
            if (bestSellerProducts.isEmpty()) {
                return "Hi·ªán t·∫°i ch∆∞a c√≥ s·∫£n ph·∫©m b√°n ch·∫°y. Vui l√≤ng xem c√°c s·∫£n ph·∫©m trong menu nh√©! üî•";
            }
            String response = buildProductResponse(bestSellerProducts, "b√°n ch·∫°y");
            log.info("Best seller products found: {}", bestSellerProducts.size());
            return response;

        } catch (Exception e) {
            log.error("Error handling best seller intent: ", e);
            return "Kh√¥ng th·ªÉ t√¨m s·∫£n ph·∫©m b√°n ch·∫°y. Vui l√≤ng th·ª≠ l·∫°i sau!";
        }
    }

    private List<Product> getPizzaProducts() {
        return productRepository.findByCategoryNameContainingIgnoreCaseAndActiveTrue("Pizza");
    }


    private List<Product> getCheapestProducts() {
        Pageable pageable = PageRequest.of(0, 5);
        return productRepository.findCheapestProducts(pageable);
    }


    private List<Product> getHighestPriceProducts() {
        Pageable pageable = PageRequest.of(0, 5);
        return productRepository.findHighestPriceProducts(pageable);
    }

    private List<Product> getPromotionProducts() {
        return productRepository.findPromotionProducts();
    }


    private List<Product> getComboProducts() {
        return productRepository.findByCategoryNameContainingIgnoreCaseAndActiveTrue("Combo");

    }

    private List<Product> getBestSellerProducts() {
        return orderRepository.findTopBestSellingProductsForGemini(5);
    }


    private String buildProductResponse(List<Product> products, String type) {
        StringBuilder response = new StringBuilder();

        switch (type.toLowerCase()) {
            case "gi√° r·∫ª nh·∫•t" -> response.append("C√°c m√≥n gi√° r·∫ª nh·∫•t:");
            case "gi√° cao nh·∫•t" -> response.append("C√°c m√≥n cao c·∫•p:");
            case "khuy·∫øn m√£i" -> response.append("C√°c m√≥n ƒëang khuy·∫øn m√£i:");
            case "combo" -> response.append("Combo:");
            case "b√°n ch·∫°y" -> response.append("M√≥n b√°n ch·∫°y nh·∫•t:");
        }

        for (int i = 0; i < Math.min(products.size(), 5); i++) {
            Product product = products.get(i);
            response.append(product.getName());

            response.append(" - ").append(formatPrice(product.getBasePrice()));

            if (product.getDescription() != null && !product.getDescription().isEmpty()) {
                response.append("\n   ").append(product.getDescription());
            }
        }

        return response.toString();
    }

    private String formatPrice(double price) {
        return String.format("%,.0f VNƒê", price);
    }


    public void streamChat(String userMessage, StreamCallback callback) {
        try {
            GenerateContentConfig config = GenerateContentConfig.builder()
                    .temperature(0.7f)
                    .build();

            geminiClient.models.generateContentStream(
                    model,
                    userMessage,
                    config
            ).forEach(chunk -> {
                if (chunk.text() != null && !chunk.text().isBlank()) {
                    callback.onChunk(chunk.text());
                }

            });

            callback.onComplete();

        } catch (Exception e) {
            log.error("Error in streaming: ", e);
            callback.onError(e);
        }
    }

    @FunctionalInterface
    public interface StreamCallback {
        void onChunk(String chunk);

        default void onComplete() {
        }

        default void onError(Exception e) {
        }
    }
}

