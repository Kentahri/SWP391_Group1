package com.group1.swp.pizzario_swp391.service;

import java.text.Normalizer;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;

import com.google.genai.Client;
import com.google.genai.types.GenerateContentConfig;
import com.group1.swp.pizzario_swp391.entity.Product;
import com.group1.swp.pizzario_swp391.repository.OrderRepository;
import com.group1.swp.pizzario_swp391.repository.ProductRepository;
import com.group1.swp.pizzario_swp391.utils.FuzzyIntentDetector;
import com.group1.swp.pizzario_swp391.utils.RegexIntentDetector;

@Service
@RequiredArgsConstructor
@Slf4j
public class GeminiChatService {


    private final Client geminiClient;
    private final FuzzyIntentDetector fuzzyIntentDetector;
    private final RegexIntentDetector regexIntentDetector;
    private final ProductRepository productRepository;
    private final OrderRepository orderRepository;

    @Value("${gemini.api.model}")
    private String model;

    public enum Intent {CHEAPEST, HIGHEST, PROMOTION, COMBO, BEST_SELLER, OTHER}

    public interface SynonymProvider {
        Map<Intent, List<String>> getSynonyms();
    }

    private static final class SynonymProviderImpl implements SynonymProvider {
        @Override
        public Map<Intent, List<String>> getSynonyms() {
            return Map.of(
                    Intent.CHEAPEST, List.of("re nhat", "gia thap nhat", "re hon", "muc gia thap", "re nhat la"),
                    Intent.HIGHEST, List.of("dat nhat", "gia cao nhat", "dat hon", "dat nhat la"),
                    Intent.PROMOTION, List.of("khuyen mai", "uu dai", "giam gia", "deal", "voucher"),
                    Intent.BEST_SELLER, List.of("ban chay", "pho bien", "hot nhat", "nhieu nguoi mua", "yeu thich", "ngon nhat"),
                    Intent.COMBO, List.of("combo")
            );
        }
    }


    private static final String SYSTEM_PROMPT = """
            B·∫°n l√† tr·ª£ l√Ω ·∫£o th√¥ng minh c·ªßa nh√† h√†ng pizza PizzarIO.
            
            Nhi·ªám v·ª• c·ªßa b·∫°n:
            - Tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ menu pizza, gi√° c·∫£, khuy·∫øn m√£i
            - T∆∞ v·∫•n m√≥n ƒÉn ph√π h·ª£p
            - Gi·∫£i ƒë√°p th·∫Øc m·∫Øc v·ªÅ gi·ªù m·ªü c·ª≠a, ƒë·ªãa ch·ªâ, d·ªãch v·ª•
            
            
            
            Phong c√°ch: Th√¢n thi·ªán, ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu, s·ª≠ d·ª•ng emoji ph√π h·ª£p.
            """;

    private String normalize(String input) {
        if (input == null || input.isBlank()) return "";
        String normalized = Normalizer.normalize(input.toLowerCase(), Normalizer.Form.NFD)
                .replaceAll("\\p{M}", "");
        if (normalized.contains("ƒë")) {
            normalized = normalized.replace("ƒë", "d");
        }
        return normalized.replaceAll("[^a-z0-9\\s%]", " ").replaceAll("\\s+", " ").trim();
    }

    private Intent detect(String input) {
        log.debug("üîç Detecting intent for input: {}", input);
        SynonymProviderImpl provider = new SynonymProviderImpl();
        regexIntentDetector.init(provider);
        String raw = normalize(input);
        log.debug("üìù Normalized input: {}", raw);
        
        Intent regexIntent = regexIntentDetector.analyzerUserIntent(raw);
        log.debug("üéØ Regex intent: {}", regexIntent);
        
        if (regexIntent != Intent.OTHER) {
            log.info("‚úÖ Intent detected by regex: {}", regexIntent);
            return regexIntent;
        }
        
        fuzzyIntentDetector.init(provider);
        Intent fuzzyIntent = fuzzyIntentDetector.detect(raw);
        log.info("‚úÖ Intent detected by fuzzy: {}", fuzzyIntent);
        return fuzzyIntent;
    }


    public String chat(String userMessage) {
        try {
            log.info("üîç Starting chat with message: {}", userMessage);
            Intent intent = detect(userMessage);
            log.info("‚úÖ Detected intent: {}", intent);
            
            StringBuilder fullPrompt;
            String requirement;
            switch (intent) {
                case CHEAPEST -> {
                    log.info("üí∞ Handling CHEAPEST intent...");
                    requirement = handleCheapestIntent();
                }
                case HIGHEST -> {
                    log.info("üíé Handling HIGHEST intent...");
                    requirement = handleHighestIntent();
                }
                case PROMOTION -> {
                    log.info("üéâ Handling PROMOTION intent...");
                    requirement = handlePromotionIntent();
                }
                case COMBO -> {
                    log.info("üçï Handling COMBO intent...");
                    requirement = handleComboIntent();
                }
                case BEST_SELLER -> {
                    log.info("üî• Handling BEST_SELLER intent...");
                    requirement = handleBestSellerIntent();
                }
                default -> {
                    log.info("‚ùì Handling OTHER intent (general chat)...");
                    requirement = "";
                }
            }

            log.info("üìù Requirement generated, length: {}", requirement.length());
            fullPrompt = new StringBuilder(SYSTEM_PROMPT).append("\n").append(requirement);
            log.info("ü§ñ Calling Gemini API with model: {}", model);
            
            GenerateContentConfig config = GenerateContentConfig.builder()
                    .temperature(0.7f)
                    .topK(50f)
                    .topP(0.85f)
                    .maxOutputTokens(2000)
                    .build();

            String response = geminiClient.models.generateContent(model, fullPrompt.toString(), config).text();
            log.info("‚úÖ Got response from Gemini, length: {}", response.length());
            return response;
        } catch (Exception e) {
            log.error("‚ùå Error in chat method: ", e);
            return "Xin l·ªói, t√¥i ƒëang g·∫∑p l·ªói. Vui l√≤ng th·ª≠ l·∫°i sau! üòî";
        }
    }


    private String handleCheapestIntent() {
        try {
            log.info("üîç Fetching cheapest products...");
            List<Product> cheapestProducts = getCheapestProducts();
            log.info("‚úÖ Found {} cheapest products", cheapestProducts.size());

            String response = buildProductResponse(cheapestProducts, "gi√° r·∫ª nh·∫•t");
            log.info("üìù Built response for cheapest products");
            return response;
        } catch (Exception e) {
            log.error("‚ùå Error handling cheapest intent: ", e);
            return "Kh√¥ng th·ªÉ t√¨m s·∫£n ph·∫©m gi√° r·∫ª nh·∫•t. Vui l√≤ng th·ª≠ l·∫°i sau!";
        }
    }

    private String handleHighestIntent() {
        try {
            List<Product> highestProducts = getHighestPriceProducts();

            String response = buildProductResponse(highestProducts, "gi√° cao nh·∫•t");
            log.info("Highest products found: {}", highestProducts.size());
            return response;

        } catch (Exception e) {
            log.error("Error handling highest intent: ", e);
            return "Kh√¥ng th·ªÉ t√¨m s·∫£n ph·∫©m gi√° cao nh·∫•t. Vui l√≤ng th·ª≠ l·∫°i sau!";
        }
    }

    private String handlePromotionIntent() {
        try {
            List<Product> promotionProducts = getPromotionProducts();
            if (promotionProducts.isEmpty()) {
                return "Hi·ªán t·∫°i kh√¥ng c√≥ s·∫£n ph·∫©m ƒëang khuy·∫øn m√£i. Vui l√≤ng quay l·∫°i sau ƒë·ªÉ kh√¥ng b·ªè l·ª° ∆∞u ƒë√£i! üéâ";
            }

            String response = buildProductResponse(promotionProducts, "khuy·∫øn m√£i");
            log.info("Promotion products found: {}", promotionProducts.size());
            return response;

        } catch (Exception e) {
            log.error("Error handling promotion intent: ", e);
            return "Kh√¥ng th·ªÉ t√¨m s·∫£n ph·∫©m khuy·∫øn m√£i. Vui l√≤ng th·ª≠ l·∫°i sau!";
        }
    }

    private String handleComboIntent() {
        try {
            List<Product> comboProducts = getComboProducts();
            if (comboProducts.isEmpty()) {
                return "Hi·ªán t·∫°i kh√¥ng c√≥ combo n√†o trong menu. Vui l√≤ng xem c√°c s·∫£n ph·∫©m kh√°c nh√©! üçï";
            }

            String response = buildProductResponse(comboProducts, "combo");
            log.info("Combo products found: {}", comboProducts.size());
            return response;

        } catch (Exception e) {
            log.error("Error handling combo intent: ", e);
            return "Kh√¥ng th·ªÉ t√¨m combo. Vui l√≤ng th·ª≠ l·∫°i sau!";
        }
    }

    private String handleBestSellerIntent() {
        try {
            List<Product> bestSellerProducts = getBestSellerProducts();

            String response = buildProductResponse(bestSellerProducts, "b√°n ch·∫°y");
            log.info("Best seller products found: {}", bestSellerProducts.size());
            return response;

        } catch (Exception e) {
            log.error("Error handling best seller intent: ", e);
            return "Kh√¥ng th·ªÉ t√¨m s·∫£n ph·∫©m b√°n ch·∫°y. Vui l√≤ng th·ª≠ l·∫°i sau!";
        }
    }


    private List<Product> getCheapestProducts() {
        log.debug("üì¶ Querying database for cheapest products...");
        List<Product> products = productRepository.findCheapestProducts();
        log.debug("‚úÖ Retrieved {} products from database", products.size());
        return products;
    }


    private List<Product> getHighestPriceProducts() {
        return productRepository.findHighestPriceProducts();
    }

    private List<Product> getPromotionProducts() {
        List<Product> allProducts = productRepository.findAll();
        LocalDateTime now = LocalDateTime.now();

        return allProducts.stream()
                .filter(product -> product.getFlashSalePrice() > 0
                        && product.getFlashSaleStart() != null
                        && product.getFlashSaleEnd() != null
                        && !product.getFlashSaleStart().isAfter(now)
                        && !product.getFlashSaleEnd().isBefore(now)
                        && product.isActive())
                .toList();
    }


    private List<Product> getComboProducts() {
        List<Product> allProducts = productRepository.findAll();

        return allProducts.stream()
                .filter(product -> product.getCategory() != null
                        && product.getCategory().getName() != null
                        && product.getCategory().getName().toLowerCase().contains("combo")
                        && product.isActive())
                .toList();
    }

    private List<Product> getBestSellerProducts() {
        return orderRepository.findTopBestSellingProductsForGemini(5);
    }


    private String buildProductResponse(List<Product> products, String type) {
        StringBuilder response = new StringBuilder();
        
        switch (type.toLowerCase()) {
            case "gi√° r·∫ª nh·∫•t" -> response.append("C√°c m√≥n gi√° r·∫ª nh·∫•t:");
            case "gi√° cao nh·∫•t" -> response.append("C√°c m√≥n cao c·∫•p:");
            case "khuy·∫øn m√£i" -> response.append("C√°c m√≥n ƒëang khuy·∫øn m√£i:");
            case "combo" -> response.append("Combo:");
            case "b√°n ch·∫°y" -> response.append("M√≥n b√°n ch·∫°y nh·∫•t:");
        }

        for (int i = 0; i < Math.min(products.size(), 5); i++) {
            Product product = products.get(i);
            response.append("\n\nüçï ").append(product.getName());

            if (product.getBasePrice() > 0) {
                response.append(" - ").append(formatPrice(product.getBasePrice()));
            }

            if (product.getDescription() != null && !product.getDescription().isEmpty()) {
                response.append("\n   ").append(product.getDescription());
            }
        }

        return response.toString();
    }

    private String formatPrice(double price) {
        return String.format("%,.0f VNƒê", price);
    }

    public String chatWithContext(String userMessage, String conversationHistory) {
        try {
            String contextualPrompt = """
                    L·ªãch s·ª≠ h·ªôi tho·∫°i:
                    %s
                    
                    Kh√°ch h√†ng h·ªèi: %s
                    
                    H√£y tr·∫£ l·ªùi d·ª±a tr√™n ng·ªØ c·∫£nh h·ªôi tho·∫°i tr∆∞·ªõc ƒë√≥.
                    """.formatted(conversationHistory, userMessage);

            return chat(contextualPrompt);

        } catch (Exception e) {
            log.error("Error in contextual chat: ", e);
            return "ƒê√£ c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω h·ªôi tho·∫°i.";
        }
    }

    public void streamChat(String userMessage, StreamCallback callback) {
        try {
            GenerateContentConfig config = GenerateContentConfig.builder()
                    .temperature(0.7f)
                    .build();

            geminiClient.models.generateContentStream(
                    model,
                    userMessage,
                    config
            ).forEach(chunk -> {
                if (chunk.text() != null && !chunk.text().isBlank()) {
                    callback.onChunk(chunk.text());
                }

            });

            callback.onComplete();

        } catch (Exception e) {
            log.error("Error in streaming: ", e);
            callback.onError(e);
        }
    }

    @FunctionalInterface
    public interface StreamCallback {
        void onChunk(String chunk);

        default void onComplete() {
        }

        default void onError(Exception e) {
        }
    }
}

